// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service.proto

package subscription_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceCategoryService_Create_FullMethodName         = "/subscription_service.ResourceCategoryService/Create"
	ResourceCategoryService_Get_FullMethodName            = "/subscription_service.ResourceCategoryService/Get"
	ResourceCategoryService_Find_FullMethodName           = "/subscription_service.ResourceCategoryService/Find"
	ResourceCategoryService_Update_FullMethodName         = "/subscription_service.ResourceCategoryService/Update"
	ResourceCategoryService_Delete_FullMethodName         = "/subscription_service.ResourceCategoryService/Delete"
	ResourceCategoryService_AddResource_FullMethodName    = "/subscription_service.ResourceCategoryService/AddResource"
	ResourceCategoryService_RemoveResource_FullMethodName = "/subscription_service.ResourceCategoryService/RemoveResource"
)

// ResourceCategoryServiceClient is the client API for ResourceCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceCategoryServiceClient interface {
	Create(ctx context.Context, in *ResourceCategory, opts ...grpc.CallOption) (*ResourceCategory, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ResourceCategory, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*ResourceCategories, error)
	Update(ctx context.Context, in *ResourceCategory, opts ...grpc.CallOption) (*ResourceCategory, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	AddResource(ctx context.Context, in *ResourceAndCategoryIds, opts ...grpc.CallOption) (*Empty, error)
	RemoveResource(ctx context.Context, in *ResourceAndCategoryIds, opts ...grpc.CallOption) (*Empty, error)
}

type resourceCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceCategoryServiceClient(cc grpc.ClientConnInterface) ResourceCategoryServiceClient {
	return &resourceCategoryServiceClient{cc}
}

func (c *resourceCategoryServiceClient) Create(ctx context.Context, in *ResourceCategory, opts ...grpc.CallOption) (*ResourceCategory, error) {
	out := new(ResourceCategory)
	err := c.cc.Invoke(ctx, ResourceCategoryService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ResourceCategory, error) {
	out := new(ResourceCategory)
	err := c.cc.Invoke(ctx, ResourceCategoryService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*ResourceCategories, error) {
	out := new(ResourceCategories)
	err := c.cc.Invoke(ctx, ResourceCategoryService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) Update(ctx context.Context, in *ResourceCategory, opts ...grpc.CallOption) (*ResourceCategory, error) {
	out := new(ResourceCategory)
	err := c.cc.Invoke(ctx, ResourceCategoryService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ResourceCategoryService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) AddResource(ctx context.Context, in *ResourceAndCategoryIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ResourceCategoryService_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceCategoryServiceClient) RemoveResource(ctx context.Context, in *ResourceAndCategoryIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ResourceCategoryService_RemoveResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceCategoryServiceServer is the server API for ResourceCategoryService service.
// All implementations must embed UnimplementedResourceCategoryServiceServer
// for forward compatibility
type ResourceCategoryServiceServer interface {
	Create(context.Context, *ResourceCategory) (*ResourceCategory, error)
	Get(context.Context, *Id) (*ResourceCategory, error)
	Find(context.Context, *GetListFilter) (*ResourceCategories, error)
	Update(context.Context, *ResourceCategory) (*ResourceCategory, error)
	Delete(context.Context, *Id) (*Empty, error)
	AddResource(context.Context, *ResourceAndCategoryIds) (*Empty, error)
	RemoveResource(context.Context, *ResourceAndCategoryIds) (*Empty, error)
	mustEmbedUnimplementedResourceCategoryServiceServer()
}

// UnimplementedResourceCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceCategoryServiceServer struct {
}

func (UnimplementedResourceCategoryServiceServer) Create(context.Context, *ResourceCategory) (*ResourceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceCategoryServiceServer) Get(context.Context, *Id) (*ResourceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceCategoryServiceServer) Find(context.Context, *GetListFilter) (*ResourceCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedResourceCategoryServiceServer) Update(context.Context, *ResourceCategory) (*ResourceCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceCategoryServiceServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceCategoryServiceServer) AddResource(context.Context, *ResourceAndCategoryIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedResourceCategoryServiceServer) RemoveResource(context.Context, *ResourceAndCategoryIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResource not implemented")
}
func (UnimplementedResourceCategoryServiceServer) mustEmbedUnimplementedResourceCategoryServiceServer() {
}

// UnsafeResourceCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceCategoryServiceServer will
// result in compilation errors.
type UnsafeResourceCategoryServiceServer interface {
	mustEmbedUnimplementedResourceCategoryServiceServer()
}

func RegisterResourceCategoryServiceServer(s grpc.ServiceRegistrar, srv ResourceCategoryServiceServer) {
	s.RegisterService(&ResourceCategoryService_ServiceDesc, srv)
}

func _ResourceCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).Create(ctx, req.(*ResourceCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).Update(ctx, req.(*ResourceCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAndCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).AddResource(ctx, req.(*ResourceAndCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceCategoryService_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAndCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceCategoryServiceServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceCategoryService_RemoveResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceCategoryServiceServer).RemoveResource(ctx, req.(*ResourceAndCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceCategoryService_ServiceDesc is the grpc.ServiceDesc for ResourceCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription_service.ResourceCategoryService",
	HandlerType: (*ResourceCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourceCategoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ResourceCategoryService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ResourceCategoryService_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceCategoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceCategoryService_Delete_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _ResourceCategoryService_AddResource_Handler,
		},
		{
			MethodName: "RemoveResource",
			Handler:    _ResourceCategoryService_RemoveResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	ResourceService_Create_FullMethodName = "/subscription_service.ResourceService/Create"
	ResourceService_Get_FullMethodName    = "/subscription_service.ResourceService/Get"
	ResourceService_Find_FullMethodName   = "/subscription_service.ResourceService/Find"
	ResourceService_Update_FullMethodName = "/subscription_service.ResourceService/Update"
	ResourceService_Delete_FullMethodName = "/subscription_service.ResourceService/Delete"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	Create(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Resource, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*Resources, error)
	Update(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) Create(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*Resources, error) {
	out := new(Resources)
	err := c.cc.Invoke(ctx, ResourceService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) Update(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ResourceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ResourceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	Create(context.Context, *Resource) (*Resource, error)
	Get(context.Context, *Id) (*Resource, error)
	Find(context.Context, *GetListFilter) (*Resources, error)
	Update(context.Context, *Resource) (*Resource, error)
	Delete(context.Context, *Id) (*Empty, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) Create(context.Context, *Resource) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceServiceServer) Get(context.Context, *Id) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceServiceServer) Find(context.Context, *GetListFilter) (*Resources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedResourceServiceServer) Update(context.Context, *Resource) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceServiceServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Create(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Update(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription_service.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourceService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ResourceService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ResourceService_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	SubscriptionCategoryService_Create_FullMethodName                 = "/subscription_service.SubscriptionCategoryService/Create"
	SubscriptionCategoryService_Get_FullMethodName                    = "/subscription_service.SubscriptionCategoryService/Get"
	SubscriptionCategoryService_Find_FullMethodName                   = "/subscription_service.SubscriptionCategoryService/Find"
	SubscriptionCategoryService_Update_FullMethodName                 = "/subscription_service.SubscriptionCategoryService/Update"
	SubscriptionCategoryService_Delete_FullMethodName                 = "/subscription_service.SubscriptionCategoryService/Delete"
	SubscriptionCategoryService_AddResourceCategory_FullMethodName    = "/subscription_service.SubscriptionCategoryService/AddResourceCategory"
	SubscriptionCategoryService_RemoveResourceCategory_FullMethodName = "/subscription_service.SubscriptionCategoryService/RemoveResourceCategory"
)

// SubscriptionCategoryServiceClient is the client API for SubscriptionCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionCategoryServiceClient interface {
	Create(ctx context.Context, in *SubscriptionCategory, opts ...grpc.CallOption) (*SubscriptionCategory, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionCategory, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*SubscriptionCategories, error)
	Update(ctx context.Context, in *SubscriptionCategory, opts ...grpc.CallOption) (*SubscriptionCategory, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	AddResourceCategory(ctx context.Context, in *SubscriptionResourceCategoryIds, opts ...grpc.CallOption) (*Empty, error)
	RemoveResourceCategory(ctx context.Context, in *SubscriptionResourceCategoryIds, opts ...grpc.CallOption) (*Empty, error)
}

type subscriptionCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionCategoryServiceClient(cc grpc.ClientConnInterface) SubscriptionCategoryServiceClient {
	return &subscriptionCategoryServiceClient{cc}
}

func (c *subscriptionCategoryServiceClient) Create(ctx context.Context, in *SubscriptionCategory, opts ...grpc.CallOption) (*SubscriptionCategory, error) {
	out := new(SubscriptionCategory)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SubscriptionCategory, error) {
	out := new(SubscriptionCategory)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*SubscriptionCategories, error) {
	out := new(SubscriptionCategories)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) Update(ctx context.Context, in *SubscriptionCategory, opts ...grpc.CallOption) (*SubscriptionCategory, error) {
	out := new(SubscriptionCategory)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) AddResourceCategory(ctx context.Context, in *SubscriptionResourceCategoryIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_AddResourceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCategoryServiceClient) RemoveResourceCategory(ctx context.Context, in *SubscriptionResourceCategoryIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionCategoryService_RemoveResourceCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionCategoryServiceServer is the server API for SubscriptionCategoryService service.
// All implementations must embed UnimplementedSubscriptionCategoryServiceServer
// for forward compatibility
type SubscriptionCategoryServiceServer interface {
	Create(context.Context, *SubscriptionCategory) (*SubscriptionCategory, error)
	Get(context.Context, *Id) (*SubscriptionCategory, error)
	Find(context.Context, *GetListFilter) (*SubscriptionCategories, error)
	Update(context.Context, *SubscriptionCategory) (*SubscriptionCategory, error)
	Delete(context.Context, *Id) (*Empty, error)
	AddResourceCategory(context.Context, *SubscriptionResourceCategoryIds) (*Empty, error)
	RemoveResourceCategory(context.Context, *SubscriptionResourceCategoryIds) (*Empty, error)
	mustEmbedUnimplementedSubscriptionCategoryServiceServer()
}

// UnimplementedSubscriptionCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionCategoryServiceServer struct {
}

func (UnimplementedSubscriptionCategoryServiceServer) Create(context.Context, *SubscriptionCategory) (*SubscriptionCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) Get(context.Context, *Id) (*SubscriptionCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) Find(context.Context, *GetListFilter) (*SubscriptionCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) Update(context.Context, *SubscriptionCategory) (*SubscriptionCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) AddResourceCategory(context.Context, *SubscriptionResourceCategoryIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceCategory not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) RemoveResourceCategory(context.Context, *SubscriptionResourceCategoryIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourceCategory not implemented")
}
func (UnimplementedSubscriptionCategoryServiceServer) mustEmbedUnimplementedSubscriptionCategoryServiceServer() {
}

// UnsafeSubscriptionCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionCategoryServiceServer will
// result in compilation errors.
type UnsafeSubscriptionCategoryServiceServer interface {
	mustEmbedUnimplementedSubscriptionCategoryServiceServer()
}

func RegisterSubscriptionCategoryServiceServer(s grpc.ServiceRegistrar, srv SubscriptionCategoryServiceServer) {
	s.RegisterService(&SubscriptionCategoryService_ServiceDesc, srv)
}

func _SubscriptionCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).Create(ctx, req.(*SubscriptionCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).Update(ctx, req.(*SubscriptionCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_AddResourceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionResourceCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).AddResourceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_AddResourceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).AddResourceCategory(ctx, req.(*SubscriptionResourceCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCategoryService_RemoveResourceCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionResourceCategoryIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCategoryServiceServer).RemoveResourceCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCategoryService_RemoveResourceCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCategoryServiceServer).RemoveResourceCategory(ctx, req.(*SubscriptionResourceCategoryIds))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionCategoryService_ServiceDesc is the grpc.ServiceDesc for SubscriptionCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription_service.SubscriptionCategoryService",
	HandlerType: (*SubscriptionCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubscriptionCategoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubscriptionCategoryService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _SubscriptionCategoryService_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubscriptionCategoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubscriptionCategoryService_Delete_Handler,
		},
		{
			MethodName: "AddResourceCategory",
			Handler:    _SubscriptionCategoryService_AddResourceCategory_Handler,
		},
		{
			MethodName: "RemoveResourceCategory",
			Handler:    _SubscriptionCategoryService_RemoveResourceCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	SubscriptionService_Create_FullMethodName = "/subscription_service.SubscriptionService/Create"
	SubscriptionService_Get_FullMethodName    = "/subscription_service.SubscriptionService/Get"
	SubscriptionService_Find_FullMethodName   = "/subscription_service.SubscriptionService/Find"
	SubscriptionService_Update_FullMethodName = "/subscription_service.SubscriptionService/Update"
	SubscriptionService_Delete_FullMethodName = "/subscription_service.SubscriptionService/Delete"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	Create(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Subscription, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*Subscriptions, error)
	Update(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Create(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, SubscriptionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, SubscriptionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*Subscriptions, error) {
	out := new(Subscriptions)
	err := c.cc.Invoke(ctx, SubscriptionService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Update(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, SubscriptionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	Create(context.Context, *Subscription) (*Subscription, error)
	Get(context.Context, *Id) (*Subscription, error)
	Find(context.Context, *GetListFilter) (*Subscriptions, error)
	Update(context.Context, *Subscription) (*Subscription, error)
	Delete(context.Context, *Id) (*Empty, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) Create(context.Context, *Subscription) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubscriptionServiceServer) Get(context.Context, *Id) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubscriptionServiceServer) Find(context.Context, *GetListFilter) (*Subscriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedSubscriptionServiceServer) Update(context.Context, *Subscription) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubscriptionServiceServer) Delete(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Create(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Update(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription_service.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SubscriptionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubscriptionService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _SubscriptionService_Find_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubscriptionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubscriptionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	UserSubscriptionService_Buy_FullMethodName = "/subscription_service.UserSubscriptionService/Buy"
)

// UserSubscriptionServiceClient is the client API for UserSubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSubscriptionServiceClient interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userSubscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSubscriptionServiceClient(cc grpc.ClientConnInterface) UserSubscriptionServiceClient {
	return &userSubscriptionServiceClient{cc}
}

func (c *userSubscriptionServiceClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserSubscriptionService_Buy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSubscriptionServiceServer is the server API for UserSubscriptionService service.
// All implementations must embed UnimplementedUserSubscriptionServiceServer
// for forward compatibility
type UserSubscriptionServiceServer interface {
	Buy(context.Context, *BuyRequest) (*Empty, error)
	mustEmbedUnimplementedUserSubscriptionServiceServer()
}

// UnimplementedUserSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSubscriptionServiceServer struct {
}

func (UnimplementedUserSubscriptionServiceServer) Buy(context.Context, *BuyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedUserSubscriptionServiceServer) mustEmbedUnimplementedUserSubscriptionServiceServer() {
}

// UnsafeUserSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSubscriptionServiceServer will
// result in compilation errors.
type UnsafeUserSubscriptionServiceServer interface {
	mustEmbedUnimplementedUserSubscriptionServiceServer()
}

func RegisterUserSubscriptionServiceServer(s grpc.ServiceRegistrar, srv UserSubscriptionServiceServer) {
	s.RegisterService(&UserSubscriptionService_ServiceDesc, srv)
}

func _UserSubscriptionService_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSubscriptionServiceServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSubscriptionService_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSubscriptionServiceServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSubscriptionService_ServiceDesc is the grpc.ServiceDesc for UserSubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription_service.UserSubscriptionService",
	HandlerType: (*UserSubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _UserSubscriptionService_Buy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
